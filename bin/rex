#!perl -w

#
# (c) Jan Gehring <jan.gehring@gmail.com>
# 
# vim: set ts=3 sw=3 tw=0:
# vim: set expandtab:


use strict;
use warnings;

use FindBin;

use lib "$FindBin::Bin/../lib";

use Rex;
use Rex::Config;
use Rex::Group;
use Rex::Batch;
use Rex::Task;
use Rex::Commands;
use Rex::Commands::Run;

use Getopt::Std;

$|++;

my %opts;

if($#ARGV < 0) {
   @ARGV = qw(-h);
}

getopts('FThvf:M:b:e:H:u:p:P:K:', \%opts);

if($opts{'h'}) {
   print "(R)?ex - (Remote)? Execution\n";
   printf "  %-15s %s\n", "-b", "Run batch";
   printf "  %-15s %s\n", "-e", "Run the given code fragment";
   printf "  %-15s %s\n", "-H", "Execute task on these hosts (*)";
   printf "  %-15s %s\n", "-u", "Username for the ssh connection (*)";
   printf "  %-15s %s\n", "-p", "Password for the ssh connection (*)";
   printf "  %-15s %s\n", "-P", "Private Keyfile for the ssh connection (*)";
   printf "  %-15s %s\n", "-K", "Public Keyfile for the ssh connection (*)";
   printf "  %-15s %s\n", "-T", "List all known tasks.";
   printf "  %-15s %s\n", "-f", "Use this file instead of Rexfile";
   printf "  %-15s %s\n", "-h", "Display this help";
   printf "  %-15s %s\n", "-M", "Load Module instead of Rexfile";
   printf "  %-15s %s\n", "-v", "Display (R)?ex Version";
   printf "  %-15s %s\n", "-F", "Force. Don't regard lock file";
   print "\n";
   print "(*) Only useful with -e\n";
   print "\n";
   CORE::exit 0;
} elsif($opts{'v'}) {
   print "(R)?ex " . $Rex::VERSION . "\n";
   CORE::exit 0;
}

$::rexfile = "Rexfile";
if($opts{'f'}) {
   $::rexfile = $opts{'f'};
}

if($opts{'e'}) {
   # execute the given code
   my $code = "sub { \n";
   $code   .= $opts{'e'} . "\n";
   $code   .= "}";

   $code = eval($code);

   if($opts{'u'}) {
      Rex::Commands::user($opts{'u'});
   }

   if($opts{'p'}) {
      Rex::Commands::password($opts{'p'});
   }

   if($opts{'P'}) {
      Rex::Commands::private_key($opts{'P'});
   }

   if($opts{'K'}) {
      Rex::Commands::public_key($opts{'K'});
   }

   my @params = ();
   if($opts{'H'}) {
      push @params, split(/\s+/, $opts{'H'});
   }
   push @params, $code;
   push @params, "eval-line-desc";

   Rex::Task->create_task("eval-line", @params);
   Rex::Commands::do_task("eval-line");
}
elsif($opts{'M'}) {
   my $mod = $opts{'M'};
   $mod =~ s{::}{/}g;
   require "$mod.pm";
}
elsif(-f $::rexfile) {
   if(-f "$::rexfile.lock" && ! exists $opts{'F'}) {
      my $pid = eval { local(@ARGV, $/) = ("$::rexfile.lock"); <>; };
      system("ps aux | awk -F' ' ' { print \$2 } ' | grep $pid >/dev/null 2>&1");
      if($? == 0) {
         print STDERR "Rexfile in use by $pid.\n";
         CORE::exit 1;
      } else
      {
         print STDERR "Found stale lock file. Removing it.\n";
         unlink("$::rexfile.lock");
      }
   }
   
   print STDERR "Checking Rexfile Syntax...\n";
   system("$^X -MRex::Commands -c $::rexfile");
   if($? != 0) {
      exit 1;
   }

   open(my $f, ">$::rexfile.lock") or die($!);
   print $f $$; 
   close($f);
   eval {
      do($::rexfile);
   };

   if($@) { print $@ . "\n"; exit 1; }
} else {
   print STDERR "No Rexfile found.\n";
   CORE::exit 1;
}

if($opts{'T'}) {
   print "Tasks\n";
   for my $task (Rex::Task->get_tasks) {
      printf "  %-30s %s\n", $task, Rex::Task->get_desc($task);
   }
   print "Batches\n";
   for my $batch (Rex::Batch->get_batchs) {
      printf "  %-30s %s\n", $batch, Rex::Batch->get_desc($batch);
   }
}

eval {
   if($opts{'b'}) {
      my $batch = $opts{'b'};
      if(Rex::Batch->is_batch($batch)) {
         Rex::Batch->run($batch);
      }
   }

   if(defined $ARGV[0]) {
      for my $task (@ARGV) {
         if(Rex::Task->is_task($task)) {
            Rex::Task->run($task);
         }
      }
   }
};

if($@) {
   print STDERR "Error: $@\n";
}

# lock loeschen
unlink("$::rexfile.lock") if(! exists $opts{'F'});


